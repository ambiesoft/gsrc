CCは２つのスレッドに分かれる、メイン側と実装側
メイン側はレイヤツリー
レイヤは変形、サイズ、そしてコンテント
レイヤはオンデマンドでつくられる
レイヤはダメージを受ける（setNeedsDisplayInRect)
コンポジタはレイヤデリゲートをいつ実行するかを決めペイントを実行（Win32のInvalidateRect/Paintと同じ）
レイヤは木構造で、クリップ／反射などのいろいろな効果を付与することができる。
・LayerChromium : メイン側のレイヤ
・CCLayerImpl : 実装側のレイヤ


コンポジタの実装側はレイヤツリーの利用者からは隠されていて、メイン側のコピーである

メイン側のツリーはwebkitが描画したいもの
メイン側はレイヤをペイントしテクスチャにする、これを実装側へ渡す。
実装側のツリーは画面に表示されるもの
実装側はいつでも描画できる（メイン側がブロックされていても）

LayerChromiumツリーの利用者はレイヤがスクロール可能かどうか指定できる。
実装側はユーザの入力をメイン側に伝える前にスクロール処理をすることができる

LayerChromiumのユーザはツリーにアニメーションを追加することができる
実装側でアニメーションを動かすことができる

・CCLayerTreeHost : LayerChromiumのツリー、CCLayerTreeHost::m_rootLayer（メイン側）
・CCLayerTreeHostImpl : CCLayerImplのツリー、CCLayerTreeHostImpl::m_rootLayer（実装側）

実装側はコピーをもっている。このコピーを最新にすることをコミットという。
メイン側をブロックした状態で、メイン側のツリーをすべて回り、pushPropertiesToを実装側にコピーする。

メイン側のツリーが変更されたときコミットフラグを立てる(setNeedsCommit）

!CCProxy
シングルスレッドモデルとマルチスレッドモデルがある
最初はシングルだったがマルチを開発し両方動かすためにCCProxyがある
2つの違いは同期とスケジュールのアルゴリズムの違い
２つのそれぞれがCCProxyのサブクラスがある
CCSingleThreadProxy : コンボジタがシングルスレッドで動くモード。メインスレッドから描画される
CCThreadProxy : コンポジタと他のスレッドからなる。


!CCScheduler
