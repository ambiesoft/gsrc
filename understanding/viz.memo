DOMのnodeはRenderObjectと対応している
RenderObjectはレンダツリーという木構造をしている。
RenderObjectはNodeをどのようにペイントするかを知っている
RenderObjectはGraphicsContextに描画命令を発する
GraphicsContextはピクセルをビットマップに描画する
GraphicsContextはSkiaをラップしている

以前はGraphicsContextはSkCanvsへの呼び出しでソフトウェアビットマップに描画していた
今はペイント作業をメインスレッドから開放したため、SkPictureに記録する。
SkPictureはシリアル化できるのであとでコマンドをリプレイできる

!RenderObjectからRenderLayerへ

RenderObjectはRenderLayerと関連している
同じ座標空間を共有しているRenderObjectは同じRenderLayerを共有している
RenderLayerは表示の順番や重なり具合、透明度などを調整する
以下の条件のときは新規のRenderLayerが作られる

・ページのルートオブジェクトの場合
・明示的なCSSポジションプロパティがある場合
・透明な場合
・オーバーフロウやアルファマスクやリフレクションがある場合
・CSSフィルタがある場合
・<canvas>の３D（WebGL)コンテキストまたは加速２Dコンテクストの場合
・<video>

RenderObjectとRenderLayerは一対一対応ではない

!RenderLayerからGraphicsLayerへ

RenderLayerのいくつかはバックサーフェスを取得する。このRenderLayerはコンポジットレイヤと呼ばれる
コンポジットレイヤでないRenderLayerはコンポジットレイヤである親のRenderLayerを利用する
この関係はRenderObjectとRenderLayerの関係と同じである。

GraphicsLayerはGraphicsContextをもち関連するRenderLayerの情報を持っている。
コンポジタの役割はGraphicsContextの出力ビットマップを結合して最終的なスクリーンイメージを生成することである。
